// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NetboxMessage.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NetboxMessage.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






NetboxMessage::NetboxMessage()
{
}

NetboxMessage::~NetboxMessage()
{
}

NetboxMessage::NetboxMessage(
        const NetboxMessage& x)
{
    m_id = x.m_id;
    m_data = x.m_data;
}

NetboxMessage::NetboxMessage(
        NetboxMessage&& x) noexcept
{
    m_id = x.m_id;
    m_data = std::move(x.m_data);
}

NetboxMessage& NetboxMessage::operator =(
        const NetboxMessage& x)
{

    m_id = x.m_id;
    m_data = x.m_data;
    return *this;
}

NetboxMessage& NetboxMessage::operator =(
        NetboxMessage&& x) noexcept
{

    m_id = x.m_id;
    m_data = std::move(x.m_data);
    return *this;
}

bool NetboxMessage::operator ==(
        const NetboxMessage& x) const
{
    return (m_id == x.m_id &&
           m_data == x.m_data);
}

bool NetboxMessage::operator !=(
        const NetboxMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void NetboxMessage::id(
        uint8_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint8_t NetboxMessage::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint8_t& NetboxMessage::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void NetboxMessage::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void NetboxMessage::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& NetboxMessage::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& NetboxMessage::data()
{
    return m_data;
}


// Include auxiliary functions like for serializing/deserializing.
#include "NetboxMessageCdrAux.ipp"

