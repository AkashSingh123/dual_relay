// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NetboxMessage1.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NetboxMessage1.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






NetboxMessage1::NetboxMessage1()
{
}

NetboxMessage1::~NetboxMessage1()
{
}

NetboxMessage1::NetboxMessage1(
        const NetboxMessage1& x)
{
    m_id = x.m_id;
    m_topics = x.m_topics;
    m_timestamp = x.m_timestamp;
    m_payload = x.m_payload;
}

NetboxMessage1::NetboxMessage1(
        NetboxMessage1&& x) noexcept
{
    m_id = x.m_id;
    m_topics = std::move(x.m_topics);
    m_timestamp = x.m_timestamp;
    m_payload = std::move(x.m_payload);
}

NetboxMessage1& NetboxMessage1::operator =(
        const NetboxMessage1& x)
{

    m_id = x.m_id;
    m_topics = x.m_topics;
    m_timestamp = x.m_timestamp;
    m_payload = x.m_payload;
    return *this;
}

NetboxMessage1& NetboxMessage1::operator =(
        NetboxMessage1&& x) noexcept
{

    m_id = x.m_id;
    m_topics = std::move(x.m_topics);
    m_timestamp = x.m_timestamp;
    m_payload = std::move(x.m_payload);
    return *this;
}

bool NetboxMessage1::operator ==(
        const NetboxMessage1& x) const
{
    return (m_id == x.m_id &&
           m_topics == x.m_topics &&
           m_timestamp == x.m_timestamp &&
           m_payload == x.m_payload);
}

bool NetboxMessage1::operator !=(
        const NetboxMessage1& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void NetboxMessage1::id(
        int64_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int64_t NetboxMessage1::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int64_t& NetboxMessage1::id()
{
    return m_id;
}


/*!
 * @brief This function copies the value in member topics
 * @param _topics New value to be copied in member topics
 */
void NetboxMessage1::topics(
        const std::vector<std::string>& _topics)
{
    m_topics = _topics;
}

/*!
 * @brief This function moves the value in member topics
 * @param _topics New value to be moved in member topics
 */
void NetboxMessage1::topics(
        std::vector<std::string>&& _topics)
{
    m_topics = std::move(_topics);
}

/*!
 * @brief This function returns a constant reference to member topics
 * @return Constant reference to member topics
 */
const std::vector<std::string>& NetboxMessage1::topics() const
{
    return m_topics;
}

/*!
 * @brief This function returns a reference to member topics
 * @return Reference to member topics
 */
std::vector<std::string>& NetboxMessage1::topics()
{
    return m_topics;
}


/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void NetboxMessage1::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t NetboxMessage1::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& NetboxMessage1::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member payload
 * @param _payload New value to be copied in member payload
 */
void NetboxMessage1::payload(
        const std::vector<uint8_t>& _payload)
{
    m_payload = _payload;
}

/*!
 * @brief This function moves the value in member payload
 * @param _payload New value to be moved in member payload
 */
void NetboxMessage1::payload(
        std::vector<uint8_t>&& _payload)
{
    m_payload = std::move(_payload);
}

/*!
 * @brief This function returns a constant reference to member payload
 * @return Constant reference to member payload
 */
const std::vector<uint8_t>& NetboxMessage1::payload() const
{
    return m_payload;
}

/*!
 * @brief This function returns a reference to member payload
 * @return Reference to member payload
 */
std::vector<uint8_t>& NetboxMessage1::payload()
{
    return m_payload;
}


// Include auxiliary functions like for serializing/deserializing.
#include "NetboxMessage1CdrAux.ipp"

